% Evaluate / plot the result generated by our algorithm
% Vertical partition of flight phase (preferred)
% *WITH* horizontal displacement as one of the states.
% 

% close all;

% scaling = 8;
% % Jumping:
% current_mode = 1;
% x0 = [ 0.9; 0; 0; 0; 1 ];

% Running:

% current_mode = 2;
% x0 = [ -1; 0.3; 0.17; 0.1 ];
current_mode = 3;
x0 = [ -1; 0.3; 0.2; 0 ];

previous_mode = 0;

% params = SLIPParams;

opt = [ ...     % 1 = actual, 2 = taylor expansion
        1;      % Dynamics
        1;      % Guard
        1;      % Reset map
       ];

MaxTime = 1;
Target = 0;

% domain_size = params.domain_size;
% scale_x = cell(3,1);
% trans_x = cell(3,1);
f = cell(3,1);
g = cell(3,1);
% for i = 1 : 3
%     scale_x{i} = (domain_size{i}(:,2) - domain_size{i}(:,1)) / 2;
%     trans_x{i} = mean(domain_size{i},2);
% end
% Dynamics
if opt(1)
    f{1} = @(xx) scaling * Stance_f(xx);
    g{1} = @(xx) scaling * Stance_g(xx);
else
    f{1} = @(xx) scaling * Stance_f_Approx(xx);
    g{1} = @(xx) scaling * Stance_g_Approx(xx);
end
f{2} = @(xx) scaling * Flight_f(xx);
g{2} = @(xx) scaling * Flight_g(xx);
f{3} = @(xx) scaling * Flight_f(xx);
g{4} = @(xx) scaling * Flight_g(xx);
% Reset map
if opt(3)
    R_12 = @(xx) Reset_S2F(xx);
    R_23 = @(xx) xx;
    R_31 = @(xx) Reset_F2S(xx);
else
    R_12 = @(xx) Reset_S2F_Approx(xx);
    R_23 = @(xx) xx;
    R_31 = @(xx) Reset_F2S_Approx(xx);
end

controller = @(tt,xx) max(-1,min(1,double(subs(out.u{1}, [t;x{1}], [tt;xx]))));
% controller = @(tt,xx) double(subs(out.u{1}, [t;x{1}], [tt;xx]));

current_time = 0;

P = SLIPPlot( current_mode, x0, params );
state_hist = [];        % [ l, ldot, theta, thetadot, x, xdot, y, ydot, mode ]
t_hist = [];

% x0 = rescale_state( x0, domain_size{current_mode} );

while current_time < MaxTime - 0.05
    disp(current_mode);
    switch current_mode
        case 1      % Stance
            options = odeset('Events',@EvtFunc_S2F_scaled);
            options = odeset(options,'AbsTol',1e-9,'RelTol',1e-8);
                [ tout, xout, event_time, event_state, event_id ] = ...
                ode45(@(tt,xx) ( f{1}(xx) + g{1}(xx) * controller(tt,xx) ), ...
                             (current_time : 1e-3 : MaxTime), x0, options);
            % Reset
            previous_mode = current_mode;
            if ~isempty(event_id)
                if event_id(1) ~= 1
                    current_mode = 0;
                else
                    xend = xout(end,:);
                    x0 = R_12(xend);
                    current_mode = 2;
                end
            end
            current_time = tout(end);
            % Plot
            tout = tout * scaling;
%             xout = rescale_state_back( xout, domain_size{1} );
            t_hist = [ t_hist; tout ];
            mat = [ eye(5), nan*ones(5,3) ];
            tmp = xout*mat;
            tmp(:,7) = tmp(:,1) .* cos(tmp(:,3));
            state_hist = [ state_hist; tmp, 1*ones(length(tout),1) ];
            
            P.Visualize( tout, xout, previous_mode );
            
        case 2      % Flight 1 (under ground)
            options = odeset('Events',@EvtFunc_F1_scaled);
            options = odeset(options,'AbsTol',1e-9,'RelTol',1e-8);
            [ tout, xout, event_time, event_state, event_id ] = ...
                ode45(@(tt,xx) ( f{2}(xx) ), ...
                             (current_time : 1e-3 :  MaxTime), x0, options);
            % Reset
            previous_mode = current_mode;
            if ~isempty(event_id)
                if event_id(1) ~= 1
                    current_mode = 0;
                else
                    xend = xout(end,:);
                    x0 = R_23(xend);
                    current_mode = 3;
                end
            end
            if x0(3)<yR
                x0 = R_31(x0);
                current_mode = 1;
            end
            current_time = tout(end);
            % Plot
            tout = tout * scaling;
%             xout = rescale_state_back( xout, domain_size{2} );
            t_hist = [t_hist; tout];
            mat = [ nan*ones(4,4), eye(4) ];
            state_hist = [ state_hist; xout*mat, 2*ones(length(tout),1) ];
            
            P.Visualize( tout, xout, previous_mode );
            
        case 3      % Flight 2 (above ground)
            options = odeset('Events',@EvtFunc_F2S_scaled);
            options = odeset(options,'AbsTol',1e-9,'RelTol',1e-8);
            [ tout, xout, event_time, event_state, event_id ] = ...
                ode45(@(tt,xx) ( f{3}(xx) ), ...
                             (current_time : 1e-3 : MaxTime), x0, options);
            % Reset
            previous_mode = current_mode;
            if ~isempty(event_id)
                if event_id(1) ~= 1
                    current_mode = 0;
                else
                    xend = xout(end,:);
                    x0 = R_31(xend);
                    current_mode = 1;
                end
            end
            current_time = tout(end);
            % Plot
            tout = tout * scaling;
%             xout = rescale_state_back( xout, domain_size{3} );
            t_hist = [t_hist; tout];
            mat = [ nan*ones(4,4), eye(4) ];
            state_hist = [ state_hist; xout*mat, 3*ones(length(tout),1) ];
            
            P.Visualize( tout, xout, previous_mode ); 
            
        case 0
            break;
            
        otherwise
            error('Invalid Mode');
    end
end

t_hist = t_hist( state_hist(:,5)<=10 );
state_hist = state_hist( state_hist(:,5)<=10, : );
l_hist          = state_hist(:,1);
l_dot_hist      = state_hist(:,2);
theta_hist      = state_hist(:,3);
theta_dot_hist  = state_hist(:,4);
x_hist          = state_hist(:,5);
x_dot_hist      = state_hist(:,6);
y_hist          = state_hist(:,7);
y_dot_hist      = state_hist(:,8);
mode_hist       = state_hist(:,9);

% figure(2);
% hold on;
% plot(t_hist, x_dot_hist,'LineWidth',2);
% title('x dot');
% 
% figure(2);
% hold on;
% plot(t_hist, y_hist, 'LineWidth', 2);
% title('y');
% 
% figure;
% plot(t_hist, y_dot_hist, 'LineWidth',2);
% title('y dot');
% 
% figure;
% plot(t_hist, theta_hist, 'LineWidth', 2);
% title('theta');
% 
% figure;
% plot(t_hist, theta_dot_hist, 'LineWidth', 2);
% title('theta dot');
% 
% figure;
% plot(t_hist, l_hist, 'LineWidth', 2);
% title('l');
% 
% figure;
% plot(t_hist, l_dot_hist, 'LineWidth', 2);
% title('l dot');


%% Plot the control
u_hist = 0 * t_hist;
for i = 1 : length(t_hist)
    if ~isnan(l_hist(i))
        s = [ l_hist(i); l_dot_hist(i); theta_hist(i); theta_dot_hist(i); x_hist(i) ];
        u_hist(i) = controller( t_hist(i)/scaling, s );
    else
        u_hist(i) = nan;
    end
end
% u_hist = (u_hist + 1) / 10;

figure(2);
plot(t_hist, u_hist);
xlim([0,3]);
ylim([-2,2]);

%% Key frames
% idx_mat = diff(mode_hist);
% idx = [ find( idx_mat > 0 ); find( idx_mat < 0 )+1];
% idx = sort([1; idx]);
% springcoord( [ 0, 0 ] , [ 0, params.l0 ], 5, 1.5, 0.2);
% figure;
% hold on;
% plot(x_hist, y_hist, '-.');
% for i = 1 : length(idx)
%     j = idx(i);
%     if mode_hist(j+1) == mode_hist(j)
%         xv = (x_hist(j+1) - x_hist(j)) / (t_hist(j+1) - t_hist(j));
%         yv = (y_hist(j+1) - y_hist(j)) / (t_hist(j+1) - t_hist(j));
%     elseif mode_hist(j) == mode_hist(j-1)
% %         disp(mode_hist(j));
%         xv = (x_hist(j) - x_hist(j-1)) / (t_hist(j) - t_hist(j-1));
%         yv = (y_hist(j) - y_hist(j-1)) / (t_hist(j) - t_hist(j-1));
%     end
%     PlotFrame(state_hist(j,:),params,xv,yv,gca);
% end
% axis equal
% ylim([0, 1.5]);
% xlim([0, 10]);
% set(gca, 'YTick', [0 1.5]);

%% Generate initial guess for gpops
% mode_hist = mode_hist(x_hist < 0);
% t_hist = t_hist(t_hist < 0);
% idx_mat = diff(mode_hist);
% idx = find( idx_mat ~= 0 );
% cnt = 1;
% guess(1).time = [ 0; 0 ];
% guess(1).state = [ -1, 0.3, 0.2, 0;
%                     0,   0, 0,   0 ];
% for i = 1 : length(idx)
%     guess(cnt).time(2) = t_hist(idx);
%     guess(cnt).state(2,:) = state_hist(idx, 1:5);
%     guess(cnt+1).time = zeros(2,0);
%     guess(cnt+1).state = zeros()
% end




%% Compute the cost
cost = 0;
for i = 1 : length(t_hist)-1
    if (t_hist(i) > scaling)
        break;
    end
    if (x_hist(i) > 0)
        break;
    end
    
    if mode_hist(i) == 1
        
%         cost = cost + (t_hist(i+1) - t_hist(i)) * 1;
%         cost = cost - l_hist(i) * (t_hist(i+1) - t_hist(i));
        cost = cost + (0.25 * t_hist(i) / scaling - 1 - x_hist(i))^2 * (t_hist(i+1) - t_hist(i));
        
    elseif mode_hist(i) > 1
    
%         cost = cost + (t_hist(i+1) - t_hist(i)) * 1;
%         cost = cost - y_hist(i) * (t_hist(i+1) - t_hist(i));
        cost = cost + (0.25 * t_hist(i) / scaling - 1 - x_hist(i))^2 * (t_hist(i+1) - t_hist(i));
        
    else
        
        disp('terminate');
        
    end
end
disp(['cost = ', num2str(cost)]);